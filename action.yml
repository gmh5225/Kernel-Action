name: 'Android Kernel Build Action'
description: "A action to built android kernel."

branding:
  icon: 'activity'
  color: 'blue'

inputs:
  kernel-url:
    description: 'Kernel Source Url'
    required: true
  depth:
    required: false
    default: 1
  vendor-url:
    description: 'Kernel Vendor Source Url'
    required: false
  kernel-dir:
    required: false
    default: kernel
  vendor:
    required: false
    default: false
  vendor-dir:
    required: false
    default: vendor
  branch:
    description: 'Branch name'
    required: false
    default: main
  config:
    description: 'configuration for building android kernel'
    required: true
    default: defconfig
  arch:
    required: true
    default: arm64
  android-version:
    description: 'Android version.'
    required: true
    default: 12
  ksu:
    description: 'KernelSU function support'
    required: false
    default: false
  ksu-version:
    description: 'KernelSU default branch'
    required: false
    default: "main"
  kprobes:
    description: 'Enable kprobes for ksu'
    required: false
    default: false
  overlayfs:
    description: 'Enable Overlayfs for ksu'
    required: false
    default: false
  disable-lto:
    description: 'Disable LTO configs for configs.'
    required: false
    default: false
  disable_fst:
    description: 'Disable FST configs for configs.'
    required: false
    default: false  
  disable_cc_werror:
    description: 'Disable CC_WERROR configs for configs.'
    required: false
    default: false
  lxc:
    description: 'Enable lxc and docker configs for configs.'
    required: false
    default: false
  lxc-patch:
    description: 'Apply lxc patch aviod not booting'
    required: false
    default: false
  nethunter:
    description: 'Enable Kali nethunter'
    required: false
    default: false
  nethunter-patch:
    description: 'patch config'
    required: false
    default: false
  bbrplus:
    description: 'Enable bbrplus and docker configs for configs.'
    required: false
    default: false
  kvm:
    description: 'Enable KVM for configs.'
    required: false
    default: false
  ccache:
    description: 'Enable Ccache for compiling kernel'
    required: false
    default: false
  aosp-gcc:
    description: 'Use gcc from aosp project.'
    required: true
    default: true
  aosp-clang:
    description: 'Use clang from aosp project.'
    required: false
    default: false
  aosp-clang-version:
    required: false
    default: "r383902"
  other-clang-url:
    required: false
    default: ''
  other-clang:
    description: 'Use clang from 3rd party.'
    required: false
    default: false
  other-clang-branch:
    required: false
    default: main
  android-ndk:
    description: 'Use Android NDK to build kernrl (Experimental features)'
    required: false
    default: false
  android-ndk-version:
    required: false
    default: r21
  android-ndk-x64:
    required: false
    default: true
  python-27:
    description: 'Use python2.7 when build kernel.'
    required: false
    default: false
  anykernel3:
    description: 'Package kernel use anykernel3.'
    required: false
    default: false
  bootimg-url:
    description: "boot.img path"
    required: false
    default: ""
  release:
    description: "After the kernel compilation is completed, it will be automatically published to the releases page"
    required: false
    default: false
  access-token:
    description: 'PAT with repository scope (https://github.com/settings/tokens)'
    required: false
  extra-cmd:
    description: 'Extra options of building kernel.'
    required: false
    default: ""

runs:
  using: 'composite'
  steps:

    - name: Setup ccache
      if: inputs.ccache == 'true'
      uses: hendrikmuhs/ccache-action@v1.2 
      with:
        key: build-kernel-${{ inputs.arch }}${{ inputs.config }}
        max-size: 4G

    - name: Build Kernel
      shell: bash
      run: |
         echo "::group:: Cleaning up"
         docker rmi -f $(docker images -q)
         wget -q https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh && NONINTERACTIVE=1 bash ./uninstall.sh -f -q
         echo "::endgroup::"

         echo "::group:: Installing Building Depend Packages"
         sudo apt-get update
         sudo apt-get install --no-install-recommends -y binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3 aria2
         echo "::endgroup::"

         echo "::group:: Setting Up Swap"
         export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
         sudo swapoff $SWAP_FILE
         sudo rm $SWAP_FILE
         sudo fallocate -l 16G $SWAP_FILE
         sudo chmod 600 $SWAP_FILE
         sudo mkswap $SWAP_FILE
         sudo swapon $SWAP_FILE
         echo "::endgroup::"

         if [ ${{ inputs.aosp-gcc }} = true ]; then
             echo "::group:: Downloading AOSP GCC"
             if [ ${{ inputs.aosp-clang }} = true ]; then
                 mkdir -p -v $HOME/gcc-64
                 aria2c -o gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
                 tar -C $HOME/gcc-64 -zxf gcc-aarch64.tar.gz
                 mkdir -p -v $HOME/gcc-32
                 aria2c -o gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
                 tar -C $HOME/gcc-32 -zxf gcc-arm.tar.gz
             else
                 git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/ --depth=1 -b android${{ inputs.android-version }}-release $HOME/gcc-64
                 git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/ --depth=1 -b android${{ inputs.android-version }}-release $HOME/gcc-32
             fi
         echo "::endgroup::"
         fi

         if [ ${{ inputs.other-clang }} = true ]; then
             if [ ${{ inputs.aosp-clang }} = true ]; then
                 echo "please disable aosp-clang to use 3rd clang."
                 exit 1
             else
                 echo "::group:: Downloading 3rd clang"
                 git clone ${{ inputs.other-clang-url }} -b ${{ inputs.other-clang-branch }} $HOME/clang --depth=${{ inputs.depth }}
             fi
         fi
         echo "::endgroup::"

         if [ ${{ inputs.android-ndk }} = true ]; then
             echo "::group:: Downloading Android NDK"
             if [ ${{ inputs.aosp-gcc }} = false ]; then
                 if [ ${{ inputs.android-ndk-x64 }} = false ]; then
                     aria2c -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-${{ inputs.android-ndk-version }}-linux.zip
                     unzip -d $HOME android-ndk.zip
                 else
                     aria2c -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-${{ inputs.android-ndk-version }}-linux-x86_64.zip
                     unzip -d $HOME android-ndk.zip
                 fi
             else
                 echo "Please disable aosp-gcc and aosp-clang."
                 exit 127
             fi
             echo "::endgroup::"

             export HOMES=$(pwd)
             export LLVMS=$HOME/android-ndk-${{ inputs.android-ndk-version }}/toolchains/llvm/prebuilt/linux-x86_64/bin
             cd $LLVMS
             for file in $(ls llvm-*); do
                 ln -s -v "$file" "aarch64-linux-android$(( ${{ inputs.android-version }} + 19 ))-${file#llvm-}"
             done
             cd $HOMES
         fi

         if [ ${{ inputs.python-27 }} = true ]; then
             echo "::group:: Installing Python2.7 instead Python3"
             sudo apt-get install -y -q python2.7 python2.7-minimal
             test -f /bin/python && sudo rm -v /bin/python
             test -f /bin/python || sudo ln -v -s /bin/python2.7 /bin/python
             test -f /bin/python2 || sudo ln -v -s /bin/python2.7 /bin/python2
             echo "::endgroup::"
         fi

         if [ ${{ inputs.aosp-clang }} = true ]; then
             echo "::group:: Downloading AOSP clang"
             if [ ${{ inputs.aosp-gcc }} = true ]; then
                 mkdir $HOME/clang -p -v
                 aria2c -o aosp-clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android${{ inputs.android-version }}-release/clang-${{ inputs.aosp-clang-version }}.tar.gz
                 tar -C $HOME/clang -zxf aosp-clang.tar.gz
             else
                 echo "Please enable aosp-gcc."
                 exit 127
             fi
             echo "::endgroup::"
         fi

         echo "::group:: Pulling Kernel Source"
         mkdir -p -v kernel
         git clone --recursive ${{ inputs.kernel-url }} -b "${{ inputs.branch }}" --depth=${{ inputs.depth }} kernel/${{ inputs.kernel-dir }}
         echo "::endgroup::"

         if [ ${{ inputs.vendor }} = true ]; then
             echo "::group:: <<<Pulling Kernel vendor source"
             git clone ${{ inputs.vendor-url }} --depth=${{ inputs.depth }} kernel/${{ inputs.vendor-dir }}
             test -d kernel/${{ inputs.vendor-dir }}/vendor && cp -rv kernel/${{ inputs.vendor-dir }}/vendor kernel
             test -d kernel/${{ inputs.vendor-dir }}/vendor && cp -rv kernel/${{ inputs.vendor-dir }}/vendor ./
             echo "::endgroup::"
         fi

         if [ ${{ inputs.ksu }} = true ]; then
            echo "::group:: Initializing KernelSU"
            cd kernel/${{ inputs.kernel-dir }}
            if [ -f KernelSU/kernel/Kconfig ]; then
                echo "KernelSU has been initialized,skipped."
            else
                curl -LSs "https://raw.githubusercontent.com/wxt1221/KernelSU/main/kernel/setup.sh" | bash -s main ${{ inputs.ksu-version }}
            fi
           #if grep -q "CONFIG_KPROBES=y" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" ; then
               #echo "KPROBES enabled,skip patch."
           #else
               #if cat fs/open.c | grep -i do_faccessat >/dev/null ; then
                   #echo  Kernel SUBLEVEL is $(cat Makefile | grep "PATCHLEVEL =" | awk '{print $3}')
               #else
                   #wget https://github.com/dabao1955/kernel_build_action/raw/main/patchs/KernelSU-4.9-faccessat-hook.patch
                   #git apply KernelSU-4.9-faccessat-hook.patch
               #fi
               #if grep -q "CONFIG_OPLUS_KERNEL_SECURE_GUARD" fs/exec.c ; then
                   #wget https://github.com/dabao1955/kernel_build_action/raw/main/patchs/KernelSU-hook-OPLUS.patch
                   #git apply KernelSU-hook-OPLUS.patch
               #else
                   #wget https://github.com/dabao1955/kernel_build_action/raw/main/patchs/KernelSU-hook.patch
                   #git apply KernelSU-hook.patch
               #fi
           #fi
            echo "::endgroup::"
         fi

         if [ ${{ inputs.nethunter }} = true ]; then
             echo "::group:: Initializing Kali nethunter"
             wget https://github.com/Fyj69/Kali-defconfig-checker/raw/master/check-kernel-config
             bash check-kernel-config ${{ inputs.config }} -w
             if [ ${{ inputs.nethunter-patch }} = true ]; then
                 wget https://github.com/tomxi1997/kali-nethunter_patches/raw/main/add-rtl88xxau-5.6.4.2-drivers.patch
                 git apply add-rtl88xxau-5.6.4.2-drivers.patch
                 wget https://github.com/tomxi1997/kali-nethunter_patches/raw/main/add-wifi-injection-4.14.patch
                 git apply add-wifi-injection-4.14.patch
                #wget https://github.com/tomxi1997/kali-nethunter_patches/raw/main/add-wifi-injection.patch
                #git apply add-wifi-injection.patch
                 wget https://github.com/tomxi1997/kali-nethunter_patches/raw/main/fix-ath9k-naming-conflict.patch
                 git apply fix-ath9k-naming-conflict.patch
             else
                  echo "skip patch"
             fi
             echo "::endgroup::"
         fi

         if [ ${{ inputs.bbrplus }} = true ]; then
             echo "::group:: Initializing bbrplus"
             wget https://raw.githubusercontent.com/UJX6N/bbrplus-4.9/main/convert_official_linux-4.9.x_src_to_bbrplus.patch
             git apply convert_official_linux-4.9.x_src_to_bbrplus.patch
             echo "::endgroup::"
         else
             echo "skip patch"
         fi

         if [ ${{ inputs.disable-lto }} = true ]; then
             if grep -q "LTO" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}"
             then
                  sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
                  sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
                  sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
                  echo "CONFIG_LTO_NONE=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
             fi
         fi

         if [ ${{ inputs.disable_fst }} = true ]; then  
             grep -q "CONFIG_CC_STACKPROTECTOR_STRONG=y" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" || sed -i 's/CONFIG_CC_STACKPROTECTOR_STRONG=y/# CONFIG_CC_STACKPROTECTOR_STRONG is not set/g' arch/${{ inputs.arch }}/configs/${{ inputs.config }}    
         fi
         
         if [ ${{ inputs.disable_cc_werror }} = true ]; then
            grep -q "CONFIG_CC_WERROR=n" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" || echo "CONFIG_CC_WERROR=n" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
         fi
         
         if [ ${{ inputs.kprobes }} = true ]; then
            grep -q "CONFIG_MODULES=y" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" || echo "CONFIG_MODULES=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
            grep -q "CONFIG_KPROBES=y" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" || echo "CONFIG_KPROBES=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
            grep -q "CONFIG_HAVE_KPROBES=y" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" || echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
            grep -q "CONFIG_KPROBE_EVENTS=y" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" || echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
         fi

         if [ ${{ inputs.overlayfs }} = true ]; then
             grep -q "OVERLAY_FS" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" || echo "CONFIG_OVERLAY_FS=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
         fi

         if [ ${{ inputs.kvm }} = true ]; then
            echo "CONFIG_VIRTUALIZATION=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
            echo "CONFIG_KVM=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
            echo "CONFIG_KVM_MMIO=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
            echo "CONFIG_KVM_ARM_HOST=y" >> arch/${{ inputs.arch }}/configs/${{ inputs.config }}
         fi

         if [ ${{ inputs.lxc }} = true ]; then
             echo "::group:: Enabling LXC"
             wget https://github.com/wu17481748/lxc-docker/raw/main/LXC-DOCKER-OPEN-CONFIG.sh
             bash LXC-DOCKER-OPEN-CONFIG.sh ${{ inputs.config }} -w
             grep -q "CONFIG_ANDROID_PARANOID_NETWORK" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}" && sed -i 's/CONFIG_ANDROID_PARANOID_NETWORK=y/#CONFIG_ANDROID_PARANOID_NETWORK=y/' arch/${{ inputs.arch }}/configs/${{ inputs.config }}
             if [ ${{ inputs.lxc-patch }} = true ]; then
                 wget https://github.com/wu17481748/lxc-docker/raw/main/cgroup.patch
                 patch kernel/cgroup/cgroup.c < cgroup.patch
                 wget https://github.com/wu17481748/lxc-docker/raw/main/xt_qtaguid.patch
                 patch net/netfilter/xt_qtaguid.c < xt_qtaguid.patch
             else
                 echo skip lxc patch
             fi
             echo "::endgroup::"
         fi

         export A=$(date +%s)
         if [ ${{ inputs.aosp-clang }} = true ]; then
             echo "::group:: Building Kernel"
             mkdir -p -v out
             export CLANG_PATH=$HOME/clang
             export PATH=$CLANG_PATH/bin:$PATH
             make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang ARCH=${{ inputs.arch }} O=out ${{ inputs.config }}
             if [ ${{ inputs.ccache }} = true ]; then
                 export USE_CCACHE=1
                 make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC="ccache clang" ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }}
             else
                 make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }}
             fi
             echo "::endgroup::"
         elif [ ${{ inputs.android-ndk }} = true ]; then
             echo "::group:: Building Kernel with Android NDK"
             mkdir -p -v out
             export CLANG_PATH=$HOME/android-ndk-${{ inputs.android-ndk-version }}/toolchains/llvm/prebuilt/linux-x86_64
             export PATH=$CLANG_PATH/bin:$PATH
             make -j$(nproc --all) CROSS_COMPILE=$CLANG_PATH/bin/llvm- COMPILE_ARM32=$CLANG_PATH/bin/llvm- CLANG_TRIPLE=aarch64-linux-android$(( ${{ inputs.android-version }} + 19 ))- CC=clang ARCH=${{ inputs.arch }} O=out ${{ inputs.config }}
             if [ ${{ inputs.ccache }} = true ]; then
                 export USE_CCACHE=1
                 make -j$(nproc --all) CROSS_COMPILE=$CLANG_PATH/bin/llvm- COMPILE_ARM32=$CLANG_PATH/bin/llvm- CLANG_TRIPLE=aarch64-linux-android$(( ${{ inputs.android-version }} + 19 ))- CC="ccache clang" ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }}
             else
                 make -j$(nproc --all) CROSS_COMPILE=$CLANG_PATH/bin/llvm- COMPILE_ARM32=$CLANG_PATH/bin/llvm- CLANG_TRIPLE=aarch64-linux-android$(( ${{ inputs.android-version }} + 19 ))- CC=clang ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }}
             fi
             echo "::endgroup::"
         elif [ ${{ inputs.other-clang }} = true ]; then
             echo "::group:: Building Kernel"
             mkdir -p -v out
             export CLANG_PATH=$HOME/clang
             export PATH=$CLANG_PATH/bin:$PATH
             make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang ARCH=${{ inputs.arch }} O=out ${{ inputs.config }}
             if [ ${{ inputs.ccache }} = true ]; then
                 export USE_CCACHE=1
                 make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC="ccache clang" ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }}
             else
                 make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }}
             fi
         elif [ ${{ inputs.aosp-gcc }} = true ]; then
             echo "::group:: Building Kernel use GCC"
             mkdir -p -v out
             make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- ARCH=${{ inputs.arch }} O=out ${{ inputs.config }}
             make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- ARCH=${{ inputs.arch }} O=out ${{ inputs.extra-cmd }} 
             echo "::endgroup::"
             echo "::endgroup::"
         fi

         export B=$(date +%s)
         export C=$(expr $B - $A)
         export buildtime=$(date) >>$GITHUB_ENV
         export dconfig=${{ inputs.config }} >>$GITHUB_ENV
         export USETIME=$(expr $C / 60)min$(expr $C % 60)s

         if [ ${{ inputs.anykernel3 }} = false ]; then
            echo "::group:: Preparing to Upload boot.img"
            git clone https://github.com/Shubhamvis98/AIK
            wget ${{ inputs.bootimg-url }} -O boot.img
            cd AIK
            nohup bash unpackimg ../boot.img
            cat nohup.out | grep "KERNEL_FMT" | awk '{gsub("\\[", "", $2); gsub("\\]", "", $2); print $2}' >>fmt.txt
            export FMT=$(cat fmt.txt)
            if [ "$FMT" = "gzip" ] ;then
                if find -name "*dtb" ; then
                    if ls cp ../out/arch/${{ inputs.arch }}/boot/Image.gz-dtb ; then
                        cp ../out/arch/${{ inputs.arch }}/boot/Image.gz-dtb split/kernel -v
                    else
                        cp ../out/arch/${{ inputs.arch }}/boot/Image.gz-dtb split/kernel -v
                    fi
                else
                    cp ../out/arch/${{ inputs.arch }}/boot/Image.gz split/kernel -v
                fi
            elif [ "$FMT" = "raw" ] ; then
                cp ../out/arch/${{ inputs.arch }}/boot/Image split/kernel -v
            fi
            bash repackimg
            mkdir -p -v ../build
            mv boot-new.img ../build/boot.img -v
            echo "::endgroup::"
         else
            echo "::group:: Packaging Anykernel3 flasher"
            git clone https://github.com/osm0sis/AnyKernel3
            sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
            sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
            sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh

            if [ -f out/arch/${{ inputs.arch }}/boot/Image.*-dtb ]; then
                cp out/arch/${{ inputs.arch }}/boot/Image.*-dtb AnyKernel3/ -rv
            elif [ -f out/arch/${{ inputs.arch }}/boot/Image.* ]; then
                cp out/arch/${{ inputs.arch }}/boot/Image.* AnyKernel3/ -rv
            else
                cp out/arch/${{ inputs.arch }}/boot/Image AnyKernel3/ -rv
            fi

            test -f out/arch/${{ inputs.arch }}/boot/dtbo.img && cp -v out/arch/${{ inputs.arch }}/boot/dtbo.img AnyKernel3/

            rm -rf -v AnyKernel3/.git* AnyKernel3/README.md
            if [ ${{ inputs.release }} = false ]; then
                cp AnyKernel3 ../../build -r -v
            else
                zip Anykernel3-flasher.zip Anykernel3/*
                mv Anykernel3-flasher.zip ../../build -rv
            fi
            echo "::endgroup::"
         fi

    - id: uploadi
      if: inputs.release == 'false'
      uses: actions/upload-artifact@v3
      with:
        name: kernel-built
        path: build/*

    - id: release
      if: inputs.release == 'true'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.access-token }}
      with:
        name: Last CI build kernel
        tag: last-ci
        files: build/*

posts:
  using: 'composite'
  steps:
    - name: post
      shell: bash
      run:  $HOME/clang/bin/clang --version
